#!/usr/bin/python3
""" Application for monitoring ROS2 topics, nodes, services and actions. """
import curses
import threading
import logging
from gui.session import Window, TextWindow, ListWindow, Session
from ros2.monitor import Ros2Monitor, TopicSubscriber

logger = logging.getLogger('app')
ros = Ros2Monitor()
class Callback:
    """ dummy """
    def __init__(self, window_name):
        self.window_name = window_name

    def run(self, data):
        """ Dummy callback """
        _ = data
        return " Not implemented yet..."

class RosTopicListWindow(ListWindow):
    """ A window that lists all available ROS topics. """
    def handle_content(self):
        return ros.get_topics()

    def handle_input(self, key):
        super().handle_input(key)
        # when e is pressed, start the rostopic subscriber thread and display the output in the output window
        if key == ord('e'):
            logger.info("Starting topic subscriber")
            self.update_callbacks[0].cycle_mode()

    class Callback:
        """ A Callback that returns the data it receives 
        to the window it is associated with for display."""
        def __init__(self, window_name):
            self.window_name = window_name
            self.input = None
            self.output_content = None
            self.info_thread = None
            self.topic_thread = None
            self.mode = "topic_info"
            self.topic_subscriber = TopicSubscriber()
            threading.Thread( target=self.topic_subscriber.spin ).start()

        def __del__(self):
            logger.info("Deleting Callback")

        def get_topic_info_async(self):
            """ Asynchronous function to get the content of a topic. """
            if self.output_content is None:
                self.output_content = " "
            if self.input is not None:
                self.output_content = ros.get_topic_info(self.input)
        
        def get_topic_content_async(self):
            """ Synchronous function to get the content of a topic. """
            if self.output_content is None:
                self.output_content = " "
            if self.input is not None:
                logger.info("Creating dynamic subscriber")
                self.topic_subscriber.create_dynamic_subscriber(self.input)
                self.output_content = self.topic_subscriber.buffer_as_string()
                logger.info("Creating dynamic subscriber done")

        def cycle_mode(self):
            """ Cycle between topic info and topic echo."""
            if self.mode == "topic_info":
                self.mode = "topic_echo"
            else:
                self.mode = "topic_info"

        def run(self, input_line):
            """ Return topic info to the output window."""
            self.input = input_line
            
            if self.mode == "topic_info":
                threading.Thread( target=self.get_topic_info_async ).start()
                self.topic_subscriber.end_subscription()
            if self.mode == "topic_echo":
                logger.info("Running topic echo")
                threading.Thread( target=self.get_topic_content_async ).start()

            if self.output_content is not None:
                return self.output_content
            else:
                return "Waiting for input..."

class RosNodeListWindow(ListWindow):
    """ A window that lists all available ROS nodes."""
    def handle_content(self):
        return ros.get_nodes()

    def handle_input(self, key):
        super().handle_input(key)
        """ TODO """

    class Callback:
        """ A Callback that returns the data it receives 
        to the window it is associated with for display."""
        def __init__(self, window_name):
            self.window_name = window_name
            self.input = None
            self.output_content = None

        def __del__(self):
            logger.info("Deleting Callback")

        def get_node_content_async(self):
            """ Asynchronous function to get the content of a node."""
            if self.output_content is None:
                self.output_content = " "
            if self.input is not None:
                self.output_content = ros.get_node_info(self.input)

        def run(self, input_line):
            """ Return node info to the output window."""
            self.input = input_line
            threading.Thread( target=self.get_node_content_async ).start()

            if self.output_content is not None:
                return self.output_content
            else:
                return "Waiting for input..."
class RosServiceListWindow(ListWindow):
    """ A window that lists all available ROS services."""

    def __init__(self, window_name, side, Callbacks):
        super().__init__(window_name, side, Callbacks)
        self.filter = ["/get_parameters"
                      ,"/set_parameters"
                      ,"/describe_parameters"
                      ,"/get_parameter_types"
                      ,"/set_parameters_atomically"
                      ,"/list_parameters"]

    def handle_content(self):
        services = ros.get_services()

        output = []

        append = True
        for service in services:
            for filter in self.filter:
                if filter in service:
                    append = False
                    break
            if append:
                output.append(service)
                append = False

        if len(output) == 0:
            output.append("No services available")
        return output

    def handle_input(self, key):
        super().handle_input(key)
        """ TODO """
    class Callback:
        """ A Callback that returns the data it receives 
        to the window it is associated with for display."""
        def __init__(self, window_name):
            self.window_name = window_name
            self.input = None
            self.output_content = None

        def __del__(self):
            logger.info("Deleting Callback")

        def get_service_content_async(self):
            """ Asynchronous function to get the content of a service."""
            if self.output_content is None:
                self.output_content = " "
            if self.input is not None:
                self.output_content = ros.get_service_info(self.input)

        def run(self, input_line):
            """ Return service info to the output window."""
            self.input = input_line
            threading.Thread( target=self.get_service_content_async ).start()

            if self.output_content is not None:
                return self.output_content
            else:
                return "Waiting for input..."

class RosActionListWindow(ListWindow):
    """ TODO: A window that lists all available ROS actions."""
    def handle_content(self):
        """ TODO """
        return ["Actions are not implemented yet..."]

    def handle_input(self, key):
        super().handle_input(key)
        """ TODO """

def main(stdscr):
    """ Application will update the screen with the latest ROS2 data. 
    Updates will only occur when the user has the window in focus.
    When in focus, only the selected line will call updates.
    """
    logging.basicConfig(filename='agent_controller.log', level=logging.DEBUG)
    logger.info("Starting application")
    app = Session(stdscr)

    app.add_window(
        RosTopicListWindow("RosTopicListWindow"
                          , Window.Side.LEFT
                          , [RosTopicListWindow.Callback("ContentWindow")] )
    )
    app.add_window(
        RosNodeListWindow("RosNodeListWindow"
                          , Window.Side.LEFT
                          , [RosNodeListWindow.Callback("ContentWindow")] )
    )
    app.add_window(
        RosServiceListWindow("RosServiceListWindow"
                          , Window.Side.LEFT
                          , [RosServiceListWindow.Callback("ContentWindow")] )
    )
    app.add_window(
        RosActionListWindow("RosActionListWindow"
                          , Window.Side.LEFT
                          , [Callback("ContentWindow")] )
    )
    app.add_window(
        TextWindow("ContentWindow"
                          , Window.Side.RIGHT)
    )
    app.run()

if __name__ == "__main__":
    logging.basicConfig(filename='asdf.log', level=logging.DEBUG)
    logger.info("Starting application")
    try:
        curses.wrapper(main)
    except Exception as e:
        logger.error("An error occurred:", e)
